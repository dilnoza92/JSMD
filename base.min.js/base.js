'use strict';

function main() {
    
    var elements = [new Sim(new THREE.Vector3(1,1,1), 1)];
    var scene = new Scene(elements);
    scene.animate();

}

function Scene(elements) {

    this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 1000);
    this.camera.position.z = 5;

    this.scene = new THREE.Scene();
    var scene = this.scene

    this.renderer = new THREE.CanvasRenderer();
    this.renderer.setSize(window.innerWidth, window.innerHeight);
    
    document.body.appendChild(this.renderer.domElement);


    elements.forEach(function(e) {
	e.init_render(scene);
    });
        
}

Scene.prototype.animate = function() {

    requestAnimationFrame(this.animate.bind(this));
    this.renderer.render(this.scene, this.camera);
    
};


/*
* box_dim : a THREE.Vector3 specifying the box dimension
* resolution : pixels per box_dim units
*/

function Sim(box_dim, resolution) {
    this.resolution = resolution;
    this.box_dim = box_dim;
    this.transform = new THREE.Matrix4();
    this.transform.makeScale(resolution, resolution, resolution);    
}

Sim.prototype.init_render = function(scene) {
    //draw simulation box
    this.box = { 
	'geom': new THREE.BoxGeometry(this.box_dim.applyMatrix4(this.transform)),
	'material': new THREE.MeshBasicMaterial({
            color: 0xff0000,
            wireframe: false
	})};

    this.box.mesh = new THREE.Mesh(this.box.geom, this.box.material);
    scene.add(this.box.mesh);    
};

Sim.prototype.animate = function() {
    this.box.mesh.rotation.x += 0.01;
    this.box.mesh.rotation.y += 0.02;
}
